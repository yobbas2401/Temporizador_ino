#include <Wire.h>
#include <Sodaq_DS3231.h>
#include <LiquidCrystal.h>
#define NumTimer 3 
#define BtnEnter 1
#define BtnUp 2
#define BtnDown 3
#define BtnBack 4
#define BtnNone 0
#define hora 7
#define minu 8
#define seg 9
#define out 11
#define NumSalidas 3
#define on_off 10
//#include <LiquidCrystal_I2C.h> 
//LiquidCrystal_I2C lcd(0x27, 16, 2);

char DiaSemana[][4] = {"Dom", "Lun", "Mar", "Mie", "Jue", "Vie", "Sab" };
uint8_t rs = 13, rw=12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, rw, en, d4, d5, d6, d7);
uint8_t Salida[NumSalidas] ={6, 7, 8}; //configurar pines digitales de acuerdo al numero de salidas si se modifica num salidas el vector se modifica de acuerdo a los pines de salida
int8_t BtnState=0;
short BtnAdc = 0;
int8_t C_NAV=0, C_TIMER=0, C_MENU=1, C_ExitMenu=0, C_HORA=0, C_ITEMH=0, C_FECHA=0, C_DIAS=0, C_ENTER=0, C_INCREMENTO=0;                          //  L,M,Mi,J,V,S,D,Hi,Mi,Si,on/off, salida
                            //0 1  2 3 4 5 6 7  8  9 10 11
uint8_t Timer[NumTimer][12]={{0,0, 3,4,5,6,0,16,50,0,1,0},
                             {0,0, 3,4,5,6,0,16,55,1,1,0},
                             {0,0, 0,4,5,0,0,17,9,7,1,0}};
bool DATE[NumTimer][7]={{1,1,1,1,1,1,1},  //configuracion de dias de cada timer#####################################
                        {1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1},};
uint8_t Days[7]={1,2,3,4,5,6,7};// DIAS L,M,M,J,V,S,D ##############################################################
                      //dias
uint8_t Timer1[NumTimer][5]= {{0,0,3,1,5},
                              {0,0,3,1,5},
                              {0,0,0,1,0}};

//DateTime dt();
//                           L,M,Mi,J,V,S,D,Hi,Mi,Si,Dur, salida
/*short Timer[NumTimer][12]={{0,0, 3,4,0,6,0,16,50,0,1,6},
                           {0,0, 3,4,0,6,0,16,55,1,1,6},
                           {0,0, 0,4,0,0,0,17,9,7,1,6}};
short TimerOFF[NumTimer][3]={{0,0,0}C
                             {0,0,0},
                             {0,0,0}};
bool Control_variable[NumTimer]={0, 0, 0};
*/

void setup ()
{
  Serial.begin(9600);
  //Wire.begin();
  rtc.begin();
  lcd.begin(16, 2);
  lcd.clear();
  //rtc.setDateTime(dt);
  for (byte i = 0; i < NumSalidas; i++)
  {
   pinMode(Salida[i], OUTPUT);
  }
 
}

void loop ()
{
/*
BtnAdc=analogRead(1);
delay(50);
BtnState=readBtns(BtnAdc);*/
Temporizador_por_Salida();
  


if (readBtns()== BtnEnter || C_ExitMenu!=0)
{
    C_ExitMenu=1;
    if (C_NAV==0){C_MENU=Navegacion(C_MENU, 5);}
    //if (C_MENU!=C_MENU){lcd.clear(); delay(50);}
    switch (C_MENU)
    {
    case 1: //SELECCIONE UN TIMER A CONF ##############################################################3
      if (C_NAV==0)
      {
          lcd.setCursor(0, 0);
          lcd.print("CONFIG TIMER ");
          lcd.print(C_TIMER);
          lcd.setCursor(0, 1);
          lcd.print("SELECT TIMER");
          delay(150);
          lcd.clear(); 
      }
      if ( readBtns()==BtnEnter || C_NAV!=0)
      {
        C_NAV=1;
        C_TIMER=incremento_01(C_TIMER, NumTimer);
        lcd.setCursor(0, 0);
        lcd.print("SELECT TIMER ");
        lcd.setCursor(0, 1);
        lcd.print("TIMER ");
        lcd.print(C_TIMER);
        delay(150);
        lcd.clear();
        if ( readBtns()==BtnEnter){C_NAV=0;}
      }
      break;

    case 2: //SELECCIONE DIAS ################################################################
      if (C_NAV == 0)
      {
        lcd.setCursor(0, 0);
        lcd.print("CONFIG TIMER ");
        lcd.print(C_TIMER);
        lcd.setCursor(0, 1);
        lcd.print("SELECIONAR DIAS");
        delay(150);
        lcd.clear();
      }
      if ( readBtns()==BtnEnter || C_NAV==1)
      {
        C_NAV=1;
        C_FECHA=Navegacion1(C_FECHA, 7);
        if (Timer[C_TIMER][C_FECHA]!=0){C_DIAS=1;}
        C_DIAS=incremento_01(C_DIAS, 2);
        if ( C_DIAS==1){Timer[C_TIMER][C_FECHA]=C_FECHA+1;}
        if ( C_DIAS== 0){Timer[C_TIMER][C_FECHA]=0;}
        lcd.setCursor(0, 0);
        lcd.print("L M M J V S D");
        lcd.setCursor(0, 1);
        for (int8_t i=0; i<7; i++)
        {
          if (Timer[C_TIMER][i]!=0)
          {
            lcd.print("O");
            lcd.print("|");
          }
          else
          {
            lcd.print("X");
            lcd.print("|");
          }  
        }
        delay(150);
        lcd.clear();
        if (readBtns()==BtnBack){ C_NAV=0;}
      }
      break;

    case 3: //SELECCIONE HORA
      if (C_NAV==0)
      {
        lcd.setCursor(0, 0);
        lcd.print("CONFIG TIMER ");
        lcd.print(C_TIMER);
        lcd.setCursor(0, 1);
        lcd.print("Seleccione Hora");
        delay(150);
        lcd.clear();
      }
      if ( readBtns()==BtnEnter || C_NAV==1)
      {
        C_NAV=1;
        C_HORA=Navegacion1(C_HORA, 3);
        if (C_HORA==0){C_ITEMH=24;}
        if (C_HORA==1){C_ITEMH=60;}
        if (C_HORA==2){C_ITEMH=60;}
        Timer[C_TIMER][C_HORA+hora]=incremento_01(Timer[C_TIMER][C_HORA+hora], C_ITEMH);
        lcd.setCursor(0, 0);
        lcd.print("TIMER");
        lcd.print(C_TIMER);
        lcd.print(" H | M| S");
        lcd.setCursor(7, 1);
        lcd.print(Timer[C_TIMER][hora]);
        lcd.print(":");
        lcd.print(Timer[C_TIMER][minu]);
        lcd.print(":");
        lcd.print(Timer[C_TIMER][seg]);
        delay(150);
        lcd.clear();
        if (readBtns()==BtnBack){C_NAV=0;}
      }
      break;

    case 4: //ON/OFF
      if (C_NAV==0)
      {
        lcd.setCursor(0, 0);
        lcd.print("CONFIG TIMER ");
        lcd.print(C_TIMER);
        lcd.setCursor(0, 1);
        lcd.print("ON/OFF");
        delay(150);
        lcd.clear();
      }
      if ( readBtns()==BtnEnter || C_NAV!=0)
      {
        C_NAV=1;
        C_ENTER=Navegacion1(C_ENTER, 2);
        if (C_ENTER==1){C_ITEMH=NumSalidas;}
        if (C_ENTER==0){C_ITEMH=2;}  
        Timer[C_TIMER][C_ENTER+10]=incremento_01(Timer[C_TIMER][C_ENTER+10], C_ITEMH);
        lcd.setCursor(0, 0);
        lcd.print("ACTIVAR SALIDA T");
        lcd.print(C_TIMER);
        lcd.setCursor(0, 1);
        lcd.print("SALIDA= ");
        lcd.print(Timer[C_TIMER][out]);
        lcd.print(" | ");
        if ( Timer[C_TIMER][on_off]==1)lcd.print(" ON ");
        if ( Timer[C_TIMER][on_off]==0)lcd.print(" OFF ");
        delay(150);
        lcd.clear();
        if (readBtns()==BtnBack){C_NAV=0;C_ITEMH=0;}
      }

      
      break;

    case 5: //SALIR
      lcd.setCursor(0, 0);
      lcd.print("CONFIG TIMER ");
	    lcd.print(C_TIMER);
      lcd.setCursor(0, 1);;
      lcd.print("SALIR");
      delay(110);
      lcd.clear();
      if (readBtns()==BtnEnter)
       {
        C_ExitMenu=0;
        delay(30);
       }
      break;

    default:
      break;
    }
}

else
{
  pantalla_principal();
}

}

void Temporizador_por_Salida()
{
  DateTime now = rtc.now();
  for (int i = 0; i < NumTimer; i++)//verifica la programacion de cada timer
    {
        for (int j = 0; j < 7; j++)
        {
            if ((now.dayOfWeek()) >= Timer[i][j]) //Verifica los dias de la semana asignados a cada timer
                {
                if(now.hour()==Timer[i][7] && now.minute()==Timer[i][8] && now.second()==Timer[i][9])  //verifica el tiempo de cada timer
                    {
                                  //Salida      on/off
                    digitalWrite( Salida[Timer[i][11]], Timer[i][10]);
                    }
                } 
        }
    }
}
void Temporizador_por_Salida2()
{
  DateTime now = rtc.now();
  for (int i = 0; i < NumTimer; i++)//verifica la programacion de cada timer
    {
        for (int j = 0; j < 7; j++)
        {
          if (DATE[i][j]==1)
          {
            if ((now.dayOfWeek()) >= j+1) //Verifica los dias de la semana asignados a cada timer
                {
                if(now.hour()==Timer[i][0] && now.minute()==Timer[i][1] && now.second()==Timer[i][2])  //verifica el tiempo de cada timer
                    {
                                  //Salida      on/off
                    digitalWrite( Salida[Timer[i][6]], Timer[i][5]);
                    }
                } 
          }

        }
    }
}

/*void Temporizador_por_duracion()
{
  DateTime now = rtc.now();
  for (int i = 0; i < NumTimer; i++)
    {
        for (int j = 0; j < 7; j++)
        {
            if ((now.dayOfWeek()) >= Timer[i][j])
                {
                if(now.hour()==Timer[i][7] && now.minute()==Timer[i][8] && now.second()==Timer[i][9] && Control_variable[i]==0 ) 
                    {
                    digitalWrite(Timer[i][11], 1);
                    TimerOFF[i][1]=Timer[i][8]+Timer[i][10];
                        if(TimerOFF[i][1]>= 60)
                        {
                        TimerOFF[i][0]=(TimerOFF[i][1]/60)+Timer[i][7];
                        TimerOFF[i][1]=TimerOFF[i][1]%60;
                        Control_variable[i]=1;
                        }
						else
						{
						TimerOFF[i][0]=Timer[i][7];
						Control_variable[i]=1;
   
						
						}
                    } 
                if(now.hour()==TimerOFF[i][0] && now.minute()==TimerOFF[i][1] && now.second()==Timer[i][9] && Control_variable[i]==1 ) 
                    {
                    digitalWrite(Timer[i][11], 0);
                    Control_variable[i]=0;
                    }
                }
        }
    }
}*/
int8_t incremento_01(int8_t item, int8_t num_item)
{
if (readBtns()==BtnUp) 
    {
      item++;
      if ( item == num_item)
      {
        item = 0;
      }
    }
    if (readBtns() ==BtnDown) 
    {
      item--;
      if ( item == -1 )
      {
        item = num_item-1;
      }
    }
    return item;
}
int8_t Navegacion(int8_t item, int8_t num_item)
{
if (readBtns()==BtnUp) 
    {
      item++;
      if ( item == num_item+1)
      {
        item = 1;
      }
    }
    if (readBtns() ==BtnDown) 
    {
      item--;
      if ( item == 0 )
      {
        item = num_item;
      }
    }
    return item;
}

int8_t Navegacion1(int8_t item, int8_t num_item)
{
if (readBtns()==BtnEnter) 
    {
      item++;
      if ( item == num_item)
      {
        item = 0;
      }
    }
    return item;
}


int8_t readBtns()
{
  BtnAdc=analogRead(1);
delay(10);
  if ( BtnAdc >= 1019) return BtnEnter;
  if ( BtnAdc >= 800 && BtnAdc <= 850 ) return BtnUp;  
  if ( BtnAdc >= 600 && BtnAdc <= 630 ) return BtnDown;  
  if ( BtnAdc >= 390 && BtnAdc <= 420 ) return BtnBack;
  return BtnNone;
  /*if ( adc >= 1019) return BtnEnter;
  if ( adc >= 800 && adc <= 850 ) return BtnUp;  
  if ( adc >= 600 && adc <= 630 ) return BtnDown;  
  if ( adc >= 390 && adc <= 420 ) return BtnBack;
  return BtnNone;*/
}

void PrintDateSerial()
{
  DateTime now = rtc.now();
  Serial.print(now.year(), DEC);
  Serial.print('/');
  Serial.print(now.month(), DEC);
  Serial.print('/');
  Serial.print(now.date(), DEC);
  Serial.print(' ');
  Serial.print(now.hour(), DEC);
  Serial.print(':');
  Serial.print(now.minute(), DEC);
  Serial.print(':');
  Serial.print(now.second(), DEC);
  Serial.print(' ');
  Serial.print(DiaSemana[now.dayOfWeek()]);
  Serial.println();
}

void pantalla_principal()
{
  DateTime now = rtc.now();
  lcd.setCursor(0, 0);
  lcd.print(now.year(), DEC);
  lcd.print('/');
  lcd.print(now.month(), DEC);
  lcd.print('/');
  lcd.print(now.date(), DEC);
  lcd.setCursor(0, 1);
  lcd.print(now.hour(), DEC);
  lcd.print(':');
  lcd.print(now.minute(), DEC);
  lcd.print(':');
  lcd.print(now.second(), DEC);
  lcd.print(' ');
  lcd.print(DiaSemana[now.dayOfWeek()]);
  delay(600); 
  lcd.clear();
}